#!/usr/bin/env bash

# Custom command to join PDFs together.
function pdfjoin() {
  OUTPUTFILE=$1;
  shift;
  gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile=$OUTPUTFILE "$@";
}

# Find flash video files to back up
function flashvids() {
  lsof | grep /tmp/Flash | awk '{print $1 " " $2 " " $(NF-1)}' | sort -u | while read line; do
    EXE=$(echo $line | cut -d' ' -f1)
    PID=$(echo $line | cut -d' ' -f2)
    FILE=$(echo $line | cut -d' ' -f3)
    POINTER=$(file /proc/$PID/fd/* | grep $FILE | cut -d: -f1 | uniq)
    echo "$EXE ($PID) $POINTER -> $FILE"
  done
}

alias fc='grep -rnI --include=*.{c,cc,cpp,h,hh,hpp}'
alias fh='grep -rnI --include=*.{h,hh,hpp}'

function fcreplace() {
    local search="$1"
    local replace="$2"
    shift 2
    sed -i "s/${search}/${replace}/g" $(fc "${search}" "$@" -l)
}

function mount() {
    if (($# == 0)); then
        command mount | column -t
    else
        command mount "$@"
    fi
}

function mcd() {
    mkdir -p "$1" && cd "$1"
}

function mtmp() {
    local temp="$(mktemp -d)"
    cd "$temp"
}

vumeter() {
  arecord -f cd -d 0 -vv /dev/null
}

alias pbcopy='xsel --clipboard --input'
alias pbselect='xsel --primary --input'
alias pbpaste='xsel --clipboard --output'
alias pbclick='xsel --primary --output'

# Join a list of arguments with a string. For example, running
# "join , one two three" will print "one,two,three".
join() {
  local joiner="$1"
  shift;
  local -a args=("$@")
  for ((i = 0; i < ${#args[@]}; i++)); do
    printf "%s" "${args[i]}"
    if ((i + 1 < $#)); then
      printf "%s" "$joiner"
    fi
  done
  echo
}

# cd into the physical directory. This is useful for when you're inside a
# symlink and want to cd into the directory that the symlink points to.
cdp() {
  cd "$(pwd -P)"
}

# Prints the arguments to the function on one line at a time. I find myself
# often experimenting with bash arrays and this function makes it easier to
# understand what's happening.
print_args() {
  local i=0
  local arg
  for arg in "$@"; do
    ((++i))
    printf '%d: %s\n' "$i" "$arg"
  done
}

# Go up a specific number of directories.
up() {
  local num="${1:-1}"
  for ((i=0; i < $1; i++)); do
    cd ..
  done
}

# Creates an alarm so that terminals can highlight a window/tab.
# Useful for long-running background tasks you want to be notified of.
bell() {
  echo -ne '\a'
}
