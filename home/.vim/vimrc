" Depending on where this folder is located, put this line in your .vimrc:
"   source ~/.vim/vimrc
"
" This file is based of of Felix Crux' vimrc found at
" http://felixcrux.com/library/files/

runtime bundle/vim-pathogen/autoload/pathogen.vim
execute pathogen#infect()

set history=1000         " remember more commands and search history
set undolevels=1000      " use many muchos levels of undo
set wildignore=*.swp,*.bak,*.pyc,*.class,*.lst,*.pdf
set wildignore+=*.so,*.swp,*.zip,*.o,*.a,*.d
set title                " change the terminal's title

" Use comma instead of back-slash as the leader
let mapleader="\<Space>"

"Type <Space>w to save file which is a lot faster than :w<Enter>
nnoremap <Leader>w :w<CR>
nnoremap <Leader>x :x<CR>
nnoremap <Leader>q :q<CR>

" Type <Space>s to open a ready-to-go substitution
nnoremap <Leader>s :%s/

" Type <Space>cl to delete all superfluous whitespace at the end of a line.
nnoremap <Leader>cl :%s/\s\+$//g<CR>

" Type <Space>y to copy to the system clipboard. Disable the builtin support.
vnoremap <Leader>y :<C-U>silent '<,'>w !xsel --clipboard --input<CR>
nnoremap <Leader>y :silent w !xsel --clipboard --input<CR>
let g:clipboard = {
		\ 'name': 'xsel',
		\ 'copy': {
		\    '+': 'xsel --nodetach -i -b',
		\    '*': 'xsel --nodetach -i -p',
		\  },
		\ 'paste': {
		\    '+': 'xsel -o -b',
		\    '*': 'xsel -o -p',
		\ },
		\ 'cache_enabled': 1,
		\ }
set clipboard=

" Set to auto read when a file is changed from the outside
set autoread

set ttimeout
set ttimeoutlen=50

" Use other ways to track changes to files
set nobackup
set noswapfile
set nowb

" Persistent undo. nvim uses an incompatible format.
if has('nvim')
  set undodir=~/.vim/nvim_undodir
else
  set undodir=~/.vim/undodir
endif
set undofile

" Let backspace work normally, i.e. allow deleting everything
set backspace=indent,eol,start

" Indentation: automatic and smart, for C-like languages anyway
set autoindent
set smartindent

" Auto save before certain dangerous commands, otherwise confirm
set autowrite
set confirm

" Incrementally search through the file as you type, highlighting as you go
" Searches are also case insensitive if entered in lower-case
" Searches wrap at EOF
set incsearch
set hlsearch
set ignorecase
set smartcase
set wrapscan

" Tabs are no good, use spaces instead
set expandtab
set smarttab
set tabstop=2
set shiftwidth=4
set softtabstop=4

" Disable automatic detection of intendation settings for C/C++ files.
let g:sleuth_c_heuristics = 0
let g:sleuth_cpp_heuristics = 0

" Let us know that we are in command/insert mode, and show commands as we type
set showmode
set showcmd

" Show relative line numbers and cursor position (rows and cols) and highlight
" the current line in the editor.
set number
set relativenumber
set ruler
set scrolloff=2
set cursorline cursorcolumn
au WinLeave * set nocursorline nocursorcolumn
au WinEnter * set cursorline cursorcolumn

" Error bells are the worst
set noerrorbells

" When the cursor is on a bracket/paren/brace, highlight the other one briefly
set showmatch
set matchtime=3

" Spell checking is nice, and so is being able to add words to the dictionary
set spellfile=~/.vim/spellfile.en.add
setlocal spell spelllang=en_gb
set nospell     " turn off by default

" A nice, dark colour scheme, so make things visible and highlight syntax
set t_Co=256
set background=dark
set synmaxcol=120
syntax on
let g:zenburn_high_Contrast = 1
let g:zenburn_old_Visual = 1
let g:zenburn_alternate_Visual = 1
colorscheme zenburn

" Highlight redundant whitespaces and tabs.
highlight RedundantSpaces ctermbg=darkred guibg=red

" Add a shortcut to more explicitly show the various invisible characters in a
" file.
set listchars=tab:→\ ,eol:$,trail:·
nmap <Leader>di :set list!<CR>

" Remove the GUI toolbar, make options text instead of popups, enable the
" mouse, and use a good font
set guioptions-=T
set guioptions+=c
set mouse=
"set guifont=Inconsolata\ 10

" Windows should always have a status line
set laststatus=2

" Autowrap text, autowrap comments (and add comment delimiter), recognise
" white space, and automatically format paragraphs as they are edited, based
" on the second line of the paragraph rather than the first
set formatoptions+=jcw2lor
set wrap
set textwidth=79

" Function to let me toggle tab expansion.
function ToggleTabExpansion()
    if &expandtab
        set noexpandtab
        set nosmarttab
        echo 'Tab expansion disabled'
    else
        set expandtab
        set smarttab
        echo 'Tab expansion enabled'
    endif
endfunction

" ex command for toggling text and comment wrapping
command -bar TabExpansion call ToggleTabExpansion()
nmap <Leader>t :TabExpansion<CR>

" Function to let me cycle through number of space for tabs.
function SetTabWidth(width)
    let &tabstop = a:width
    let &shiftwidth = a:width
    let &softtabstop = a:width
    echom 'Tab width set to ' a:width
endfunction

function CycleTabWidth()
    if &tabstop == 2
        call SetTabWidth(4)
    elseif &tabstop == 4
        call SetTabWidth(8)
    else
        call SetTabWidth(2)
    endif
endfunction

" ex command for toggling text and comment wrapping
command -bar TabWidth call CycleTabWidth()
nmap <Leader>T :TabWidth<CR>

" Function to let me toggle the automatic newline insertion after
" hitting the textwidth number of characters on a given line.
function ToggleAutoWrap()
    if &formatoptions =~# '.*c.*'
        setlocal formatoptions-=c
        setlocal formatoptions-=a
        echo 'Auto wrapping disabled'
    else
        setlocal formatoptions+=c
        setlocal formatoptions+=a
        echo 'Auto wrapping enabled'
    endif
endfunction

" ex command for toggling text and comment wrapping
command -bar AutoWrap call ToggleAutoWrap()
nmap <Leader>r :AutoWrap<CR>

" I really don't want anything to get folded
"set nofoldenable
set foldmethod=syntax
set foldlevel=20
set foldlevelstart=20

" When splitting a window, put the new window below the original one
set splitbelow

" File completion
set wildmode=longest,list,full
set wildmenu
cabbr <expr> %% expand('%:h')
cabbr <expr> ^^ expand('%')

" Highlight doxygen comments
let g:load_doxygen_syntax=1

" Detect different filetypes, and load appropriate plugins and indent files
filetype plugin indent on

set nomodeline

" Remap the default motion keys so long, wrapped, but unsplit lines can be
" navigated as independent lines
" However, make it so that using line movements with a count skips long,
" wrapped lines. This makes using the relativenumber option a lot easier.
noremap <expr> j (v:count? 'j' : 'gj')
noremap <expr> k (v:count? 'k' : 'gk')

" Make Y consistent with C and D. See :help Y.
nnoremap Y y$

" Use ,p to toggle paste mode
noremap <Leader>p :set paste!<cr>

" Use ,w to toggle line wrap
noremap <Leader>R :setlocal wrap!<CR>:setlocal wrap?<CR>

" Make insert mode a bit more emacs-like
inoremap <C-a>  <Home>
inoremap <C-e>  <End>
inoremap <C-b>  <Left>
inoremap <C-f>  <Right>
inoremap <C-d>  <Delete>
inoremap <M-b>  <S-Left>
inoremap <M-f>  <S-Right>
inoremap <M-d>  <S-right><Delete>

" Make vim's command line more emacs-like
cnoremap <C-a>  <Home>
cnoremap <C-e>  <End>
cnoremap <C-b>  <Left>
cnoremap <C-f>  <Right>
cnoremap <C-d>  <Delete>
cnoremap <M-b>  <S-Left>
cnoremap <M-f>  <S-Right>
cnoremap <M-d>  <S-right><Delete>

" Use C-o to toggle spellcheck
noremap <silent> <Leader>o :set spell!<cr>

" If we ever forget to open a file with root privileges
cmap w!! w !sudo tee % >/dev/null

" Clear the highlighted searches
nmap <Leader>/ :nohlsearch<CR>

" Shortcut for opening the gundo window
nnoremap <Leader>g :GundoToggle<CR>
let g:gundo_prefer_python3 = 1

" Make splits easier to use
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-h> <C-w>h
map <C-l> <C-w>l
set wmh=0

" Shortcuts for entering/leaving hex mode
nnoremap <Leader>h :Hexmode<CR>
vnoremap <Leader>h :<C-U>Hexmode<CR>

" Re-select lines after shifting them.
vnoremap > >gv
vnoremap < <gv

set completeopt=menu,longest
set conceallevel=2
set concealcursor=nc

" Auto-complete file names.
inoremap <C-t> <C-X><C-F>

" When we're repeating an action then we don't care about seeing all the
" actions individually. Let's use lazy redrawing for those.
nnoremap . :setlocal lazyredraw<CR>.:setlocal nolazyredraw<CR>

" Let the user toggle lazy redraw easily.
nnoremap <Leader>l :setlocal lazyredraw!<CR>

" Shortcut(s) for inserting date/time stamps.
inoremap <F5> <C-R>=strftime("%FT%T%z")<CR>

" ex command for toggling hex mode - define mapping if desired
command -bar Hexmode call ToggleHex()

" helper function to toggle hex mode
function ToggleHex()
  " hex mode should be considered a read-only operation
  " save values for modified and read-only for restoration later,
  " and clear the read-only flag for now
  let l:modified=&mod
  let l:oldreadonly=&readonly
  let &readonly=0
  let l:oldmodifiable=&modifiable
  let &modifiable=1
  if !exists("b:editHex") || !b:editHex
    " save old options
    let b:oldft=&ft
    let b:oldbin=&bin
    " set new options
    setlocal binary " make sure it overrides any textwidth, etc.
    let &ft="xxd"
    " set status
    let b:editHex=1
    " switch to hex editor
    %!xxd
  else
    " restore old options
    let &ft=b:oldft
    if !b:oldbin
      setlocal nobinary
    endif
    " set status
    let b:editHex=0
    " return to normal editing
    %!xxd -r
  endif
  " restore values for modified and read only state
  let &mod=l:modified
  let &readonly=l:oldreadonly
  let &modifiable=l:oldmodifiable
endfunction

fun! SetSyntaxOnInsertEnterLeave()
  augroup syntax_insert
    autocmd!
    autocmd InsertEnter <buffer> setlocal syntax=off
    autocmd InsertLeave <buffer> setlocal syntax=on
  augroup end
endfun

augroup all_files
  autocmd!
  autocmd BufRead,BufNewFile * match RedundantSpaces /\s\+$\| \+\ze\t/
  " Go to the last line we edited.
  autocmd BufReadPost * if &ft != 'gitcommit' |
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \   exe "normal! g'\"" |
        \ endif
augroup END

augroup vagrant
    autocmd!
    autocmd BufRead,BufNewFile [vV]agrantfile set filetype=ruby
    autocmd BufRead,BufNewFile [vV]agrantfile setlocal tabstop=2
    autocmd BufRead,BufNewFile [vV]agrantfile setlocal shiftwidth=2
    autocmd BufRead,BufNewFile [vV]agrantfile setlocal softtabstop=2
augroup END

augroup docker
    autocmd!
    autocmd FileType dockerfile setlocal formatoptions-=c
augroup END

augroup filetype_markdown
    autocmd!
    " Make lists a little easier to use in text files.
    autocmd FileType markdown,text setlocal formatoptions-=2 formatoptions+=tna
augroup END

" C-style abbreviations and shortcuts
augroup filetype_c
  autocmd!
  autocmd FileType c ia <buffer> #i #include
  autocmd FileType c ia <buffer> #d #define
  autocmd FileType cpp ia <buffer> #i #include
  autocmd FileType cpp ia <buffer> #d #define
  autocmd FileType c,cpp,objc setlocal fo-=t
  autocmd FileType c,cpp,objc setlocal tabstop=2 shiftwidth=2 softtabstop=2 expandtab
  autocmd FileType c,cpp nnoremap <buffer><Leader>fs :<C-u>:FSHere<CR>
  autocmd FileType c,cpp,objc nnoremap <buffer><Leader>cf :<C-u>ClangFormat<CR>
  autocmd FileType c,cpp,objc vnoremap <buffer><Leader>cf :ClangFormat<CR>
  autocmd FileType c,cpp,objc nmap <Leader>C :ClangFormatAutoToggle<CR>
  autocmd InsertEnter *.c setlocal syntax=off
  autocmd InsertLeave *.c setlocal syntax=on
  autocmd InsertEnter *.cc setlocal syntax=off
  autocmd InsertLeave *.cc setlocal syntax=on
  autocmd InsertEnter *.cpp setlocal syntax=off
  autocmd InsertLeave *.cpp setlocal syntax=on
  autocmd InsertEnter *.h setlocal syntax=off
  autocmd InsertLeave *.h setlocal syntax=on
  autocmd InsertEnter *.hh setlocal syntax=off
  autocmd InsertLeave *.hh setlocal syntax=on
  autocmd InsertEnter *.hpp setlocal syntax=off
  autocmd InsertLeave *.hpp setlocal syntax=on
augroup END

augroup filetype_java
  autocmd!
  autocmd FileType java setlocal textwidth=100
  autocmd InsertEnter *.java setlocal syntax=off
  autocmd InsertLeave *.java setlocal syntax=on
augroup END

augroup filetype_sh
  autocmd!
  autocmd FileType sh,bash nnoremap <buffer><Leader>cf :<C-u>Shfmt -i 2<CR>
  autocmd FileType sh,bash setlocal fo-=t
augroup END

augroup filetype_robot
  autocmd!
  autocmd FileType robot setlocal fo-=t
augroup END

" Make abbreviations and shortcuts
augroup filetype_make
    autocmd!
    autocmd FileType make setlocal noexpandtab
augroup END

augroup filetype_python
  autocmd!
  autocmd FileType python setlocal tabstop=4 shiftwidth=4 softtabstop=4 expandtab
  autocmd FileType python setlocal nosmartindent
  autocmd FileType python setlocal cindent
  autocmd FileType python setlocal fo-=t
  autocmd FileType python setlocal colorcolumn=80
  autocmd FileType python setlocal textwidth=80
augroup END

augroup filetype_javascript
  autocmd!
  autocmd FileType javascript setlocal tabstop=2 shiftwidth=2 softtabstop=2 expandtab
  autocmd FileType javascript nnoremap <buffer><Leader>cf :<C-u>ClangFormat<CR>
  autocmd FileType javascript vnoremap <buffer><Leader>cf :ClangFormat<CR>
  autocmd InsertEnter *.ts setlocal syntax=off
  autocmd InsertLeave *.ts setlocal syntax=on
  autocmd InsertEnter *.js setlocal syntax=off
  autocmd InsertLeave *.js setlocal syntax=on
augroup END

augroup filetype_markdown
  autocmd!
  autocmd FileType markdown setlocal formatoptions-=c
augroup END

augroup git
    autocmd!
    autocmd BufRead,BufNewFile MERGE_MSG setfiletype gitcommit
    autocmd FileType gitcommit setlocal textwidth=70
    autocmd FileType gitcommit setlocal formatoptions+=c
    " Since commit messages don't really have code, vim doesn't distinguish
    " 'comments' either. That means we don't want it to auto-format paragraphs
    " on us. It can get messy otherwise.
    autocmd FileType gitcommit setlocal formatoptions-=w
    " Always turn spell checking on in git commits.
    autocmd FileType gitcommit setlocal spell
    autocmd FileType gitcommit call SetSyntaxOnInsertEnterLeave()
augroup END

augroup bazel
  autocmd!
  autocmd BufRead,BufNewFile *.bzl set filetype=python
  autocmd BufRead,BufNewFile *.bazel set filetype=python
  autocmd BufRead,BufNewFile BUILD set filetype=python
  autocmd BufRead,BufNewFile *.BUILD set filetype=python
  autocmd BufRead,BufNewFile WORKSPACE set filetype=python
augroup END

augroup json
  autocmd!
  autocmd FileType json nnoremap <buffer><Leader>cf :<C-u>%!python -m json.tool<CR>
augroup END

augroup fbs
  autocmd!
  autocmd BufNewFile,BufRead *.fbs setfiletype fbs
augroup END

augroup proto
  autocmd!
  autocmd BufRead,BufNewFile CROSSTOOL set filetype=protoascii
  autocmd BufRead,BufNewFile *.pb set filetype=protoascii
  autocmd BufRead,BufNewFile *.pb.txt set filetype=protoascii
  autocmd FileType protoascii setlocal tabstop=2 shiftwidth=2 softtabstop=2 expandtab
  autocmd FileType proto nnoremap <buffer><Leader>cf :<C-u>ClangFormat<CR>
  autocmd FileType proto vnoremap <buffer><Leader>cf :ClangFormat<CR>
augroup END

augroup checktime
    autocmd!
    if !has("gui_running")
        "silent! necessary otherwise throws errors when using command
        "line window.
        autocmd BufEnter        * silent! checktime
        autocmd CursorHold      * silent! checktime
        autocmd CursorHoldI     * silent! checktime
        "these two _may_ slow things down. Remove if they do.
        "autocmd CursorMoved     * silent! checktime
        "autocmd CursorMovedI    * silent! checktime
    endif
augroup END

" Tell clang-format to use the Google style.
let g:clang_format#code_style = 'google'

" Prefix all fzf commands.
let g:fzf_command_prefix = 'Fzf'

" Add some shortcuts for fzf.
" <Leader>fa will open all files.
" <Leader>fb will open all buffers.
" <Leader>fg will open a list of files known to git.
" <Leader>fl will open all lines in the current buffer.
nnoremap <Leader>fa :<C-u>FzfFiles<CR>
nnoremap <Leader>fb :<C-u>FzfBuffers<CR>
nnoremap <Leader>ff :<C-u>call fzf#run(fzf#wrap({'source': 'git ls-files --exclude-standard --cached'}))<CR>
nnoremap <Leader>fl :<C-u>FzfBLines<CR>

" Customize the shortcuts for fzf splitting.
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'buffer',
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit' }

" Create a new command to ripgrep for a certain string. The results are then
" browsable using fzf.
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   "rg --hidden -g '!.git/' --column --line-number --no-heading --color=always ".shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('right:50%:hidden', '?'),
  \   <bang>0)

nnoremap <Leader>fg :<C-u>Rg!<Space>

" Create a new command to fzf through the register contents.
function! GetRegisters()
  redir => cout
  silent registers
  redir END
  return split(cout, "\n")[1:]
endfunction
function! UseRegister(line)
  let l:var_amode = getregtype(a:line[1])
  call setreg('"', getreg(a:line[1], 1, 1), l:var_amode)
endfunction
command! Registers call fzf#run(fzf#wrap({
        \ 'source': GetRegisters(),
        \ 'sink': function('UseRegister')}))

nnoremap <Leader>fr :<C-u>Registers<CR>

" Only enable the vim-scroll-off-fraction plugin if everything's supported.
" We actually prevent it from loading in this case.
if !exists('#WinNew')
  let g:loaded_scroll_off_fraction = 1
endif

" Disable syntax concealing for markdown files. It messes with column
" highlighting.
let g:markdown_syntax_conceal = 0

" Tell the ftplugin helper which ruby we're using
" Otherwise it's really slow
let g:ruby_path = system('rvm current')

" Tell the markdown plugin to use syntax highlighting for the following
" languages.
let g:markdown_fenced_languages = [
  \ 'html',
  \ 'python',
  \ 'proto',
  \ 'robot',
  \ 'c++=cpp',
  \ 'c',
  \ 'bash=sh' ]

let g:vimspector_enable_mappings = 'HUMAN'
"sign define vimspectorBP            text=● texthl=WarningMsg
"sign define vimspectorBPCond        text=◆ texthl=WarningMsg
"sign define vimspectorBPLog         text=◆ texthl=SpellRare
"sign define vimspectorBPDisabled    text=● texthl=LineNr
"sign define vimspectorPC            text=▶ texthl=MatchParen linehl=CursorLine
"sign define vimspectorPCBP          text=●▶  texthl=MatchParen linehl=CursorLine
"sign define vimspectorCurrentThread text=▶   texthl=MatchParen linehl=CursorLine
"sign define vimspectorCurrentFrame  text=▶   texthl=Special    linehl=CursorLine

" Make it easier to create in-file diffs. Hit <Leader>dll on two sections to
" compare them. Hit <Leader>dlr to reset.
vnoremap <Leader>dll :Linediff<CR>
vnoremap <Leader>dlr :LinediffReset<CR>
noremap <Leader>dlr :LinediffReset<CR>

" New shortcuts to create snippets, list all snippets
" and open it snippet files vertically
noremap <Leader>m :UltiSnipsEdit<CR>
let g:UltiSnipsEditSplit='vertical'

" Make riv.vim use a leader other than Ctrl+e.
let g:riv_global_leader='<C-G>'
let g:riv_highlight_code='lua,cpp,javascript,vim,sh,python,ruby,c,rust'
let g:riv_auto_format_table=0

" Use gpg2 for gnupg.vim
let g:GPGExecutable="gpg2 --trust-model always"

" Set a custom color for the indentation highlight plugin.
let g:indentLine_color_term = 240
let g:indentLine_char = "|"
let g:indentLine_concealcursor = &concealcursor
let g:indentLine_conceallevel = &conceallevel
noremap <Leader>dt :IndentLinesToggle<CR>

" Some YouCompleteMe options.
nnoremap <silent> <C-t> :YcmCompleter GoTo<CR>
let g:ycm_key_list_select_completion = ['<Down>']
let g:ycm_key_list_previous_completion = ['<Up>']
let g:ycm_always_populate_location_list = 1
let g:ycm_global_ycm_extra_conf = expand('~/.vim/ycm_extra_conf.py')
let g:ycm_filetype_blacklist = {
\ 'go' : 1,
\ 'html' : 1,
\ }

" Let the user load some computer-specific settings.
if filereadable(expand('~/.vim/vimrc.local'))
  source ~/.vim/vimrc.local
endif

" Let the user load some directory-specific settings.
if filereadable('.vimrc.directory')
  "source .vimrc.directory
endif
