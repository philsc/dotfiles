snippet todo "Add a TODO" b
# TODO(${2:`whoami`}): ${1:Implement this}
endsnippet

snippet "# todo" "Add a TODO" b
# TODO(${2:`whoami`}): ${1:Implement this}
endsnippet

snippet pub "Add public visibility to a bazel target" b
visibility = ["//visibility:public"],
endsnippet

snippet priv "Add private visibility to a bazel target" b
visibility = ["//visibility:private"],
endsnippet

snippet pyl "Bazel py_library" b
py_library(
	name = "$1",
	srcs = [
		"$1.py",
	],
	deps = [
	],
	imports = [
	],
)
endsnippet

snippet pyb "Bazel py_binary" b
py_binary(
	name = "$1",
	srcs = [
		"$1.py",
	],
	main = "$1.py",
	deps = [
	],
)
endsnippet

snippet pyt "Bazel py_test" b
py_test(
	name = "$1_test",
	srcs = [
		"$1_test.py",
	],
	main = "$1_test.py",
	deps = [
		":$1",
	],
)
endsnippet

snippet ccl "Bazel cc_library" b
cc_library(
	name = "$1",
	srcs = [
		"$1.cc",
	],
	hdrs = [
		"$1.h",
	],
	deps = [
	],
)
endsnippet

snippet ccb "Bazel cc_binary" b
cc_binary(
	name = "$1",
	srcs = [
		"$1.cc",
	],
	deps = [
	],
)
endsnippet

snippet cci "Bazel cc_import" b
cc_import(
	name = "$1_import",
	interface_library = "lib/$1.so",
	system_provided = 1,
)
endsnippet

snippet cct "Bazel cc_test" b
cc_test(
	name = "$1_test",
	srcs = [
		"$1_test.cc",
	],
	deps = [
		":$1",
	],
)
endsnippet

snippet sht "Bazel sh_test" b
sh_test(
	name = "$1_test",
	size = "small",
	srcs = [
		"$1_test.sh",
	],
	data = [
	],
	deps = [
		":$1",
	],
)
endsnippet

snippet shb "Bazel sh_binary" b
sh_binary(
	name = "$1",
	srcs = [
		"$1.sh",
	],
	deps = [
	],
)
endsnippet

snippet gen "Bazel genrule" b
genrule(
	name = "$1",
	srcs = [
	],
	outs = [
	],
	tools = [
	],
	cmd = "${2:cp foo bar}",
)
endsnippet

snippet aurora "Add the Aurora copyright header" b
# Aurora Innovation, Inc. Proprietary and Confidential. Copyright `!v strftime("%Y")`.

$1
endsnippet

snippet fg "Bazel filegroup" b
filegroup(
	name = "$1",
	srcs = [
		$2
	],
)
endsnippet

snippet deps "Adds a bazel 'deps' field" b
deps = [
	$1
],
endsnippet

snippet robot "Add a bazel robot_test target" b
robot_test(
	name = "$1",
	srcs = [
		"$1.robot",
	],
	args = [
		"--exclude=DISABLED",
	],
	loglevel = "DEBUG",
)
endsnippet

snippet env "Add shebang" b
#!/usr/bin/env python3

endsnippet

snippet main "Inserts a main() invocation" b
if __name__ == "__main__":
	sys.exit(main(sys.argv))
endsnippet

snippet testmain "Inserts a unittest.main() invocation" b
if __name__ == "__main__":
	unittest.main()
endsnippet

snippet pytest "Inserts a pytest.main() invocation" b
if __name__ == "__main__":
	sys.exit(pytest.main([__file__] + sys.argv[1:]))
endsnippet

snippet data "Add a data attr to a BUILD file"
data = [
	$1
],
endsnippet

snippet pip "Add a pip dependency to a BUILD file"
"@aurora_pip_dependencies//pip/$1",
endsnippet

snippet third "Adds ignored third_party.py import" b
import third_party.py  # pylint: disable=unused-import

endsnippet
