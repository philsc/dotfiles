" Depending on where this folder is located, put this line in your .vimrc:
"   source ~/.vim/vimrc
"
" This file is based of of Felix Crux' vimrc found at
" http://felixcrux.com/library/files/

runtime bundle/vim-pathogen/autoload/pathogen.vim
execute pathogen#infect()

set history=1000         " remember more commands and search history
set undolevels=1000      " use many muchos levels of undo
set wildignore=*.swp,*.bak,*.pyc,*.class,*.lst,*.pdf
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.o,*.a,*.d
set title                " change the terminal's title

" Use comma instead of back-slash as the leader
let mapleader="\<Space>"

"Type <Space>w to save file which is a lot faster than :w<Enter>
nnoremap <Leader>w :w<CR>
nnoremap <Leader>x :x<CR>
nnoremap <Leader>q :q<CR>

" Type <Space>s to open a ready-to-go substitution
nnoremap <Leader>s :%s/

" Set to auto read when a file is changed from the outside
set autoread

set ttimeout
set ttimeoutlen=50

" Use other ways to track changes to files
set nobackup
set noswapfile
set nowb

" Persistent undo
set undodir=~/.vim/undodir
set undofile

" Let backspace work normally, i.e. allow deleting everything
set backspace=indent,eol,start

" Indentation: automatic and smart, for C-like languages anyway
set autoindent
set smartindent

" Auto save before certain dangerous commands, otherwise confirm
set autowrite
set confirm

" Incrementally search through the file as you type, highlighting as you go
" Searches are also case insensitive if entered in lower-case
" Searches wrap at EOF
set incsearch
set hlsearch
set ignorecase
set smartcase
set wrapscan

" Tabs are no good, use spaces instead
set expandtab
set smarttab
set tabstop=8
set shiftwidth=4
set softtabstop=4

" Let us know that we are in command/insert mode, and show commands as we type
set showmode
set showcmd

" Show relative line numbers and cursor position (rows and cols) and highlight 
" the current line in the editor.
set number
set relativenumber
set ruler
set scrolloff=2
set cursorline cursorcolumn
au WinLeave * set nocursorline nocursorcolumn
au WinEnter * set cursorline cursorcolumn

" Error bells are the worst
set noerrorbells

" When the cursor is on a bracket/paren/brace, highlight the other one briefly
set showmatch
set matchtime=3

" Spell checking is nice, and so is being able to add words to the dictionary
set spellfile=~/.vim/spellfile.en.add
setlocal spell spelllang=en_gb
set nospell     " turn off by default

" A nice, dark colour scheme, so make things visible and highlight syntax
set t_Co=256
set background=dark
syntax on
let g:zenburn_high_Contrast = 1
let g:zenburn_old_Visual = 1
let g:zenburn_alternate_Visual = 1
colorscheme zenburn

" Highlight redundant whitespaces and tabs.
highlight RedundantSpaces ctermbg=darkred guibg=red
match RedundantSpaces /\s\+$\| \+\ze\t/

" Remove the GUI toolbar, make options text instead of popups, enable the
" mouse, and use a good font
set guioptions-=T
set guioptions+=c
set mouse=a
"set guifont=Inconsolata\ 10

" Windows should always have a status line
set laststatus=2

" Autowrap text, autowrap comments (and add comment delimiter), recognise
" white space, and automatically format paragraphs as they are edited, based
" on the second line of the paragraph rather than the first
set formatoptions+=tcwa2
set wrap
set textwidth=79

" Function to let me toggle tab expansion.
function ToggleTabExpansion()
    if &expandtab
        set noexpandtab
        set nosmarttab
        echo 'Tab expansion disabled'
    else
        set expandtab
        set smarttab
        echo 'Tab expansion enabled'
    endif
endfunction

" ex command for toggling text and comment wrapping
command -bar TabExpansion call ToggleTabExpansion()
nmap <Leader>t :TabExpansion<CR>

" Function to let me cycle through number of space for tabs.
function SetTabWidth(width)
    let &tabstop = a:width
    let &shiftwidth = a:width
    let &softtabstop = a:width
    echom 'Tab width set to ' a:width
endfunction

function CycleTabWidth()
    if &tabstop == 2
        call SetTabWidth(4)
    elseif &tabstop == 4
        call SetTabWidth(8)
    else
        call SetTabWidth(2)
    endif
endfunction

" ex command for toggling text and comment wrapping
command -bar TabWidth call CycleTabWidth()
nmap <Leader>T :TabWidth<CR>

" Function to let me toggle the automatic newline insertion after
" hitting the textwidth number of characters on a given line.
function ToggleAutoWrap()
    if &formatoptions =~# '.*c.*'
        setlocal formatoptions-=t
        setlocal formatoptions-=c
        setlocal formatoptions-=a
        echo 'Auto wrapping disabled'
    else
        setlocal formatoptions+=t
        setlocal formatoptions+=c
        setlocal formatoptions+=a
        echo 'Auto wrapping enabled'
    endif
endfunction

" ex command for toggling text and comment wrapping
command -bar AutoWrap call ToggleAutoWrap()
nmap <Leader>r :AutoWrap<CR>

" I really don't want anything to get folded
"set nofoldenable
set foldmethod=syntax
set foldlevelstart=20

" When splitting a window, put the new window below the original one
set splitbelow

" File completion
set wildmenu
set wildmode=list:full
cabbr <expr> %% expand('%:h')

" Highlight doxygen comments
let g:load_doxygen_syntax=1

" Detect different filetypes, and load appropriate plugins and indent files
filetype plugin indent on

set modeline

" Remap the default motion keys so long, wrapped, but unsplit lines can be
" navigated as independent lines
noremap j gj
noremap k gk

" Make Y consistent with C and D. See :help Y.
nnoremap Y y$

" Use ,p to toggle paste mode
noremap <Leader>p :set paste!<cr>

" Use ,w to toggle line wrap
noremap <Leader>R :setlocal wrap!<CR>:setlocal wrap?<CR>

" Make insert mode a bit more emacs-like
inoremap <C-a>  <Home>
inoremap <C-e>  <End>
inoremap <C-b>  <Left>
inoremap <C-f>  <Right>
inoremap <C-d>  <Delete>
inoremap <M-b>  <S-Left>
inoremap <M-f>  <S-Right>
inoremap <M-d>  <S-right><Delete>

" Make vim's command line more emacs-like
cnoremap <C-a>  <Home>
cnoremap <C-e>  <End>
cnoremap <C-b>  <Left>
cnoremap <C-f>  <Right>
cnoremap <C-d>  <Delete>
cnoremap <M-b>  <S-Left>
cnoremap <M-f>  <S-Right>
cnoremap <M-d>  <S-right><Delete>

" Use C-o to toggle spellcheck
noremap <silent> <Leader>o :set spell!<cr>

" If we ever forget to open a file with root privileges
cmap w!! w !sudo tee % >/dev/null

" Clear the highlighted searches
nmap <Leader>/ :nohlsearch<CR>

" Shortcut for opening the gundo window
nnoremap <Leader>g :GundoToggle<CR>

" Make splits easier to use
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-h> <C-w>h
map <C-l> <C-w>l
set wmh=0

" Shortcuts for entering/leaving hex mode
nnoremap <Leader>h :Hexmode<CR>
vnoremap <Leader>h :<C-U>Hexmode<CR>

" Shortcut(s) for inserting date/time stamps.
inoremap <F5> <C-R>=strftime("%FT%T%z")<CR>

" ex command for toggling hex mode - define mapping if desired
command -bar Hexmode call ToggleHex()

" helper function to toggle hex mode
function ToggleHex()
  " hex mode should be considered a read-only operation
  " save values for modified and read-only for restoration later,
  " and clear the read-only flag for now
  let l:modified=&mod
  let l:oldreadonly=&readonly
  let &readonly=0
  let l:oldmodifiable=&modifiable
  let &modifiable=1
  if !exists("b:editHex") || !b:editHex
    " save old options
    let b:oldft=&ft
    let b:oldbin=&bin
    " set new options
    setlocal binary " make sure it overrides any textwidth, etc.
    let &ft="xxd"
    " set status
    let b:editHex=1
    " switch to hex editor
    %!xxd
  else
    " restore old options
    let &ft=b:oldft
    if !b:oldbin
      setlocal nobinary
    endif
    " set status
    let b:editHex=0
    " return to normal editing
    %!xxd -r
  endif
  " restore values for modified and read only state
  let &mod=l:modified
  let &readonly=l:oldreadonly
  let &modifiable=l:oldmodifiable
endfunction

augroup vagrant
    autocmd!
    autocmd BufRead,BufNewFile [vV]agrantfile set filetype=ruby
    autocmd BufRead,BufNewFile [vV]agrantfile setlocal tabstop=2
    autocmd BufRead,BufNewFile [vV]agrantfile setlocal shiftwidth=2
    autocmd BufRead,BufNewFile [vV]agrantfile setlocal softtabstop=2
augroup END

augroup yaml
    autocmd FileType yaml setlocal tabstop=2
    autocmd FileType yaml setlocal shiftwidth=2
    autocmd FileType yaml setlocal softtabstop=2
augroup END

augroup docker
    autocmd!
    autocmd FileType dockerfile setlocal formatoptions-=t
    autocmd FileType dockerfile setlocal formatoptions-=c
    autocmd FileType dockerfile setlocal formatoptions-=a
augroup END

" C-style abbreviations and shortcuts
augroup filetype_c
    autocmd!
    autocmd FileType c ia <buffer> #i #include
    autocmd FileType c ia <buffer> #d #define
    autocmd FileType cpp ia <buffer> #i #include
    autocmd FileType cpp ia <buffer> #d #define
augroup END

" Make abbreviations and shortcuts
augroup filetype_make
    autocmd!
    autocmd FileType make setlocal noexpandtab
augroup END

augroup git
    autocmd!
    autocmd BufRead,BufNewFile MERGE_MSG setfiletype gitcommit
    autocmd FileType gitcommit setlocal textwidth=73
augroup END

augroup checktime
    autocmd!
    if !has("gui_running")
        "silent! necessary otherwise throws errors when using command
        "line window.
        autocmd BufEnter        * silent! checktime
        autocmd CursorHold      * silent! checktime
        autocmd CursorHoldI     * silent! checktime
        "these two _may_ slow things down. Remove if they do.
        "autocmd CursorMoved     * silent! checktime
        "autocmd CursorMovedI    * silent! checktime
    endif
augroup END

augroup clang_format
  autocmd!
  autocmd FileType c,cpp,objc nnoremap <buffer><Leader>cf :<C-u>ClangFormat<CR>
  autocmd FileType c,cpp,objc vnoremap <buffer><Leader>cf :ClangFormat<CR>
  autocmd FileType c,cpp,objc nmap <Leader>C :ClangFormatAutoToggle<CR>
augroup END

" Tell clang-format to use the Google style.
let g:clang_format#code_style = 'google'

" Sane Ignore For ctrlp
let g:ctrlp_custom_ignore = {
\ 'dir': '\.git$\|\.hg$\|\.svn$\|\.yardoc\|tmp$',
\ }

" Set some syntastic options
let g:syntastic_check_on_open=1
let g:syntastic_enable_signs=1
let g:syntastic_cpp_config_file = '.syntastic_c_config'

" Tell the ftplugin helper which ruby we're using
" Otherwise it's really slow
let g:ruby_path = system('rvm current')

" New shortcuts to create snippets, list all snippets
" and open it snippet files vertically
noremap <Leader>m :UltiSnipsEdit<CR>
let g:UltiSnipsEditSplit='vertical'

" Make riv.vim use a leader other than Ctrl+e.
let g:riv_global_leader='<C-G>'
let g:riv_highlight_code='lua,cpp,javascript,vim,sh,python,ruby,c,rust'

" Use gpg2 for gnupg.vim
let g:GPGExecutable="gpg2 --trust-model always"

" Set a custom color for the indentation highlight plugin.
let g:indentLine_color_term = 240
let g:indentLine_char = "|"
